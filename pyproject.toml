[tool.poetry]
name = "fast-intercom-mcp"
version = "0.3.0"
description = "High-performance MCP server for Intercom conversation analytics - 100x faster than REST API"
authors = ["evolsb <your.email@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/evolsb/FastIntercomMCP"
repository = "https://github.com/evolsb/FastIntercomMCP"
documentation = "https://github.com/evolsb/FastIntercomMCP/tree/main/docs"
keywords = ["mcp", "intercom", "analytics", "performance", "conversations", "customer-success"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Office/Business :: Groupware",
]
packages = [{include = "fast_intercom_mcp"}]

[tool.poetry.dependencies]
python = "^3.10"
mcp = {version = "^1.8.0", extras = ["cli"]}
fastmcp = "^2.0.0"
httpx = {version = "^0.27.0", extras = ["http2"]}
click = "^8.1.0"
python-dotenv = "^1.0.0"
fastapi = "^0.115.0"
uvicorn = "^0.24.0"
asyncpg = "^0.29.0"
sqlalchemy = {version = "^2.0.0", extras = ["asyncio"]}
alembic = "^1.13.0"
tiktoken = "^0.5.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-benchmark = "^4.0.0"
pytest-timeout = "^2.2.0"
black = "^23.0.0"
ruff = "^0.1.0"
pre-commit = "^3.6.0"
mypy = "^1.7.0"
bandit = "^1.7.0"
# safety = "^2.4.0"  # Removed due to Python 3.13+ compatibility issues

[tool.poetry.group.test.dependencies]
factory-boy = "^3.3.0"
freezegun = "^1.2.0"
responses = "^0.24.0"
testcontainers = "^3.7.0"

[tool.poetry.scripts]
fast-intercom-mcp = "fast_intercom_mcp.cli:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "RET", # flake8-return
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true

[[tool.mypy.overrides]]
module = [
    "fastmcp.*",
    "asyncpg.*",
    "structlog.*",
    "testcontainers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "e2e: marks tests as end-to-end tests",
    "benchmark: marks tests as benchmark tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/__init__.py",
    "src/*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]